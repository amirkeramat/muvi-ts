// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  acounts        Account[]
  reviews        Review[]
  watchList      watchList[]    @relation("watchListToUser")
  favoriteList   favoriteList[] @relation("favoraiteListtoUser")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  mediaId   String   @db.String

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
}

model watchList {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation("watchListToUser", fields: [userId], references: [id])
  mediaId        String   @db.String
  mediaType      String
  backdrop_path  String?
  original_title String?
  original_name  String?
  poster_path    String?
  release_date   String?
  first_air_date String?
  vote_average   String?
  createdAt      DateTime @default(now())

  @@index([userId])
}

model favoriteList {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation("favoraiteListtoUser", fields: [userId], references: [id])
  mediaId        String   @db.String
  mediaType      String
  backdrop_path  String?
  original_title String?
  original_name  String?
  poster_path    String?
  release_date   String?
  first_air_date String?
  vote_average   String?
  createdAt      DateTime @default(now())

  @@index([userId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
